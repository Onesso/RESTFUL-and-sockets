
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  username String @unique
  password String
  avatar String?
  createdAt DateTime @default(now())
  post Post[]
  savedPosts SavedPost[]
  chats Chat[] @relation(fields: [chatIDs], references: [id])
  chatIDs String[] @db.ObjectId
  receipts Receipt[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  price Int
  images String[]
  address String
  city String
  bedroom Int
  bathroom Int
  latitude String
  longitude String
  type Type
  property Property
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  postDetail PostDetail?
  savedPosts SavedPost[]
  receipts Receipt[]
}

enum Type {
  buy
  rent
}
enum Property {
  apartment
  house
  condo
  land
}


model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])

}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  users User[] @relation(fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
  seenBy    String[]  @db.ObjectId
  createdAt DateTime @default(now())
  messages Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text String
  userId String
  chat Chat @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
  createdAt DateTime @default(now())
}

model Receipt {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Merchant Information
  merchantName String
  address String

  // Transaction Information
  transactionType String  // "rent" or "buy"
  amount Float
  paymentMethod String   // "credit_card", etc.

  // Payment Card Details
  cardType String       // "Visa", "Mastercard", etc.
  cardNumber String     // Store last 4 digits only (e.g., "•••• 1234")
  cardholder String

  // Property Information
  property String
  propertyType String   // "apartment", "house", etc.
  propertyPayment String // income/rent amount reference

  // Relationships
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for faster queries
  @@index([userId])
  @@index([postId])
}